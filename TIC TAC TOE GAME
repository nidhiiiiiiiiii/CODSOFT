#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Function prototypes
void displayBoard(const vector<vector<char>>& board);
bool updateBoard(vector<vector<char>>& board, int row, int col, char player);
bool checkForWin(const vector<vector<char>>& board, char player);
bool checkForDraw(const vector<vector<char>>& board);
char switchPlayer(char currentPlayer);
bool playAgain();

int main() {
    vector<vector<char>> board(3, vector<char>(3, ' ')); 
    char currentPlayer = 'X'; 

    bool gameOn = true;
    while (gameOn) {
        displayBoard(board);
        cout << "Player " << currentPlayer << ", Enter your move (row and column): ";
        int row, col;
        cin >> row >> col;

        if (row < 1 || row > 3 || col < 1 || col > 3 || board[row - 1][col - 1] != ' ') {
            cout << "Invalid move:| Try again." << endl;
            continue;
        }

        if (!updateBoard(board, row - 1, col - 1, currentPlayer)) {
            cout << "Error updating the board:| Exiting the game." << endl;
            return 1;
        }

        if (checkForWin(board, currentPlayer)) {
            displayBoard(board);
            cout << "Player " << currentPlayer << " wins!" << endl;
            gameOn = playAgain();
        } else if (checkForDraw(board)) {
            displayBoard(board);
            cout << "It's a draw!" << endl;
            gameOn = playAgain();
        } else {
            currentPlayer = switchPlayer(currentPlayer);
        }
    }

    cout << "Thanks for playing!" << endl;

    return 0;
}

void displayBoard(const vector<vector<char>>& board) {
    cout << "  1 2 3" << endl;
    for (int i = 0; i < 3; ++i) {
        cout << i + 1 << " ";
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j];
            if (j < 2) cout << "|";
        }
        cout << endl;
        if (i < 2) cout << "  -----" << endl;
    }
}

bool updateBoard(vector<vector<char>>& board, int row, int col, char player) {
    if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ')
        return false;

    board[row][col] = player;
    return true;
}

bool checkForWin(const vector<vector<char>>& board, char player) {
    // Check rows, columns, and diagonals for win
    for (int i = 0; i < 3; ++i) {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player))
            return true;
    }
    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
        (board[0][2] == player && board[1][1] == player && board[2][0] == player))
        return true;

    return false;
}

bool checkForDraw(const vector<vector<char>>& board) {
    // If there's still an empty cell, the game is not a draw
    for (const auto& row : board) {
        for (char cell : row) {
            if (cell == ' ')
                return false;
        }
    }
    return true;
}

char switchPlayer(char currentPlayer) {
    return (currentPlayer == 'X') ? 'O' : 'X';
}

bool playAgain() {
    char choice;
    cout << "Do you want to play again?? (y/n): ";
    cin >> choice;
    return (choice == 'y' || choice == 'Y');
}
